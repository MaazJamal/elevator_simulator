<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.18">
  <compounddef id="test__add__request__queue_8c" kind="file" language="C++">
    <compoundname>test_add_request_queue.c</compoundname>
    <includes refid="add__request__queue_8h" local="yes">add_request_queue.h</includes>
    <includes local="no">stdio.h</includes>
    <includes refid="structures_8h" local="yes">structures.h</includes>
    <includes local="no">stdbool.h</includes>
    <includes refid="test__functions_8h" local="yes">test_functions.h</includes>
    <incdepgraph>
      <node id="4">
        <label>stdbool.h</label>
      </node>
      <node id="3">
        <label>structures.h</label>
        <link refid="structures_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>add_request_queue.h</label>
        <link refid="add__request__queue_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="6">
        <label>test_functions.h</label>
        <link refid="test__functions_8h"/>
      </node>
      <node id="1">
        <label>C:/Users/Work/git_repo/elevator_simulator/test/test_add_request_queue.c</label>
        <link refid="test__add__request__queue_8c"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>stdio.h</label>
      </node>
    </incdepgraph>
      <sectiondef kind="func">
      <memberdef kind="function" id="test__add__request__queue_8c_1a65bbec89e771e9120c8ddfb32cf901f0" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>struct <ref refid="structpassenger" kindref="compound">passenger</ref></type>
        <definition>struct passenger create_dummy_passenger</definition>
        <argsstring>(int val)</argsstring>
        <name>create_dummy_passenger</name>
        <param>
          <type>int</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Work/git_repo/elevator_simulator/test/test_add_request_queue.c" line="15" column="6" bodyfile="C:/Users/Work/git_repo/elevator_simulator/test/test_add_request_queue.c" bodystart="156" bodyend="166" declfile="C:/Users/Work/git_repo/elevator_simulator/test/test_add_request_queue.c" declline="1" declcolumn="0"/>
      </memberdef>
      <memberdef kind="function" id="test__add__request__queue_8c_1a1240ae73e74884b07c231e42ca4a7e0f" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool compare</definition>
        <argsstring>(struct passenger a, struct passenger b)</argsstring>
        <name>compare</name>
        <param>
          <type>struct <ref refid="structpassenger" kindref="compound">passenger</ref></type>
          <declname>a</declname>
        </param>
        <param>
          <type>struct <ref refid="structpassenger" kindref="compound">passenger</ref></type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Work/git_repo/elevator_simulator/test/test_add_request_queue.c" line="168" column="6" bodyfile="C:/Users/Work/git_repo/elevator_simulator/test/test_add_request_queue.c" bodystart="168" bodyend="178" declfile="C:/Users/Work/git_repo/elevator_simulator/test/test_add_request_queue.c" declline="13" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="test__add__request__queue_8c_1ad74350fa86dde458b967dfdc0376e695" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_add_request_queue</definition>
        <argsstring>(void)</argsstring>
        <name>test_add_request_queue</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Work/git_repo/elevator_simulator/test/test_add_request_queue.c" line="15" column="6" bodyfile="C:/Users/Work/git_repo/elevator_simulator/test/test_add_request_queue.c" bodystart="15" bodyend="154"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>This file contains function test_add_request_queue() that provides unit testing for function <ref refid="add__request__queue_8h_1a1aa0db2f2ecae31eaf0fc492d19414c6" kindref="member">add_request_queue()</ref>. </para>
    </briefdescription>
    <detaileddescription>
<para><simplesect kind="author"><para>Maaz Jamal </para>
</simplesect>
</para>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"></codeline>
<codeline lineno="6"><highlight class="preprocessor">#include<sp/>&quot;<ref refid="add__request__queue_8h" kindref="compound">add_request_queue.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdio.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="structures_8h" kindref="compound">structures.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdbool.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="test__functions_8h" kindref="compound">test_functions.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structpassenger" kindref="compound">passenger</ref><sp/>create_dummy_passenger(int<sp/>val);</highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>compare(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structpassenger" kindref="compound">passenger</ref><sp/>a,<sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structpassenger" kindref="compound">passenger</ref><sp/>b);</highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>test_add_request_queue(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="16"><highlight class="normal">{</highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structpassenger" kindref="compound">passenger</ref><sp/>dummy1<sp/>=<sp/>create_dummy_passenger(1);</highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structpassenger" kindref="compound">passenger</ref><sp/>dummy2<sp/>=<sp/>create_dummy_passenger(2);</highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structpassenger" kindref="compound">passenger</ref><sp/>dummy3<sp/>=<sp/>create_dummy_passenger(3);</highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structpassenger" kindref="compound">passenger</ref><sp/>*head<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structpassenger" kindref="compound">passenger</ref><sp/>*returned_ptr<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structpassenger" kindref="compound">passenger</ref><sp/>*cur<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/>FILE<sp/>*f<sp/>=<sp/>fopen(</highlight><highlight class="stringliteral">&quot;test/results/results_test_add_request.txt&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;w&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Adding<sp/>to<sp/>a<sp/>NULL<sp/>address;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/>returned_ptr<sp/>=<sp/><ref refid="add__request__queue_8h_1a1aa0db2f2ecae31eaf0fc492d19414c6" kindref="member">add_request_queue</ref>(head,<sp/>dummy1);</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>test<sp/>if<sp/>returned<sp/>pointer<sp/>is<sp/>pointing<sp/>to<sp/>new<sp/>head</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(returned_ptr<sp/>!=<sp/>NULL)</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;PASS:<sp/>Addind<sp/>to<sp/>NULL,<sp/>returning<sp/>ptr<sp/>is<sp/>==<sp/>to<sp/>new<sp/>head.\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(f,<sp/></highlight><highlight class="stringliteral">&quot;PASS:<sp/>Addind<sp/>to<sp/>NULL,<sp/>returning<sp/>ptr<sp/>is<sp/>==<sp/>to<sp/>new<sp/>head.\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;FAIL:<sp/>Addind<sp/>to<sp/>NULL,<sp/>returning<sp/>ptr<sp/>is<sp/>!=<sp/>to<sp/>head.\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;FAIL:<sp/>Addind<sp/>to<sp/>NULL,<sp/>returning<sp/>ptr<sp/>=<sp/>%p<sp/>head<sp/>=<sp/>%p.\n&quot;</highlight><highlight class="normal">,<sp/>returned_ptr,<sp/>head);</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(f,<sp/></highlight><highlight class="stringliteral">&quot;FAIL:<sp/>Addind<sp/>to<sp/>NULL,<sp/>returning<sp/>ptr<sp/>is<sp/>!=<sp/>to<sp/>head.\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(f,<sp/></highlight><highlight class="stringliteral">&quot;FAIL:<sp/>Addind<sp/>to<sp/>NULL,<sp/>returning<sp/>ptr<sp/>=<sp/>%p<sp/>head<sp/>=<sp/>%p.\n&quot;</highlight><highlight class="normal">,<sp/>returned_ptr,<sp/>head);</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/>head<sp/>=<sp/>returned_ptr;</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(compare(dummy1,<sp/>*head))</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;PASS:<sp/>ADDING<sp/>to<sp/>NULL,<sp/>values<sp/>succesfully<sp/>copied.\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(f,<sp/></highlight><highlight class="stringliteral">&quot;PASS:<sp/>ADDING<sp/>to<sp/>NULL,<sp/>values<sp/>succesfully<sp/>copied.\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;FAIL:<sp/>ADDING<sp/>to<sp/>NULL,<sp/>EXPECTED:<sp/>%d<sp/>%d<sp/>%d<sp/>%d<sp/>%d<sp/>\n.&quot;</highlight><highlight class="normal">,<sp/>dummy1.arrival_floor,<sp/>dummy1.arrival_time,<sp/>dummy1.dest_floor,<sp/>dummy1.id,<sp/>dummy1.in_elevator);</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;FAIL:<sp/>ADDING<sp/>to<sp/>NULL,<sp/><sp/><sp/><sp/><sp/><sp/>GOT:<sp/>%d<sp/>%d<sp/>%d<sp/>%d<sp/>%d<sp/>\n.&quot;</highlight><highlight class="normal">,<sp/>head-&gt;<ref refid="structpassenger_1a0a31a3de4943a83121587e2d11b3e2c0" kindref="member">arrival_floor</ref>,<sp/>head-&gt;<ref refid="structpassenger_1a8dd292bfb4015a71df26b57eb23c8701" kindref="member">arrival_time</ref>,<sp/>head-&gt;<ref refid="structpassenger_1a1cd2d080a6795d30505e8722d329c7e2" kindref="member">dest_floor</ref>,<sp/>head-&gt;<ref refid="structpassenger_1a25f6b216e5dc0bede72e133edcf4b03f" kindref="member">id</ref>,<sp/>head-&gt;<ref refid="structpassenger_1a8af124b4de91150e204a2374e98ee71f" kindref="member">in_elevator</ref>);</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(f,<sp/></highlight><highlight class="stringliteral">&quot;FAIL:<sp/>ADDING<sp/>to<sp/>NULL,<sp/>EXPECTED:<sp/>%d<sp/>%d<sp/>%d<sp/>%d<sp/>%d<sp/>\n.&quot;</highlight><highlight class="normal">,<sp/>dummy1.arrival_floor,<sp/>dummy1.arrival_time,<sp/>dummy1.dest_floor,<sp/>dummy1.id,<sp/>dummy1.in_elevator);</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(f,<sp/></highlight><highlight class="stringliteral">&quot;FAIL:<sp/>ADDING<sp/>to<sp/>NULL,<sp/><sp/><sp/><sp/><sp/><sp/>GOT:<sp/>%d<sp/>%d<sp/>%d<sp/>%d<sp/>%d<sp/>\n.&quot;</highlight><highlight class="normal">,<sp/>head-&gt;<ref refid="structpassenger_1a0a31a3de4943a83121587e2d11b3e2c0" kindref="member">arrival_floor</ref>,<sp/>head-&gt;<ref refid="structpassenger_1a8dd292bfb4015a71df26b57eb23c8701" kindref="member">arrival_time</ref>,<sp/>head-&gt;<ref refid="structpassenger_1a1cd2d080a6795d30505e8722d329c7e2" kindref="member">dest_floor</ref>,<sp/>head-&gt;<ref refid="structpassenger_1a25f6b216e5dc0bede72e133edcf4b03f" kindref="member">id</ref>,<sp/>head-&gt;<ref refid="structpassenger_1a8af124b4de91150e204a2374e98ee71f" kindref="member">in_elevator</ref>);</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//adding<sp/>at<sp/>second<sp/>position</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/>returned_ptr<sp/>=<sp/><ref refid="add__request__queue_8h_1a1aa0db2f2ecae31eaf0fc492d19414c6" kindref="member">add_request_queue</ref>(head,<sp/>dummy2);</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(returned_ptr<sp/>==<sp/>head)</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;PASS:<sp/>Addind<sp/>to<sp/>2nd,<sp/>returning<sp/>ptr<sp/>is<sp/>==<sp/>to<sp/>old<sp/>head.\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(f,<sp/></highlight><highlight class="stringliteral">&quot;PASS:<sp/>Addind<sp/>to<sp/>2nd,<sp/>returning<sp/>ptr<sp/>is<sp/>==<sp/>to<sp/>old<sp/>head.\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;FAIL:<sp/>Addind<sp/>to<sp/>2nd,<sp/>returning<sp/>ptr<sp/>is<sp/>!=<sp/>to<sp/>head.\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;FAIL:<sp/>Addind<sp/>to<sp/>2nd,<sp/>returning<sp/>ptr<sp/>=<sp/>%p<sp/>head<sp/>=<sp/>%p.\n&quot;</highlight><highlight class="normal">,<sp/>returned_ptr,<sp/>head);</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(f,<sp/></highlight><highlight class="stringliteral">&quot;FAIL:<sp/>Addind<sp/>to<sp/>2nd,<sp/>returning<sp/>ptr<sp/>is<sp/>!=<sp/>to<sp/>head.\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(f,<sp/></highlight><highlight class="stringliteral">&quot;FAIL:<sp/>Addind<sp/>to<sp/>2nd,<sp/>returning<sp/>ptr<sp/>=<sp/>%p<sp/>head<sp/>=<sp/>%p.\n&quot;</highlight><highlight class="normal">,<sp/>returned_ptr,<sp/>head);</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/>head<sp/>=<sp/>returned_ptr;</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/>cur<sp/>=<sp/>head;</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(compare(dummy1,<sp/>*head))</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;PASS:<sp/>ADDING<sp/>to<sp/>2nd,<sp/>1st<sp/>position<sp/>unchanged.\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(f,<sp/></highlight><highlight class="stringliteral">&quot;PASS:<sp/>ADDING<sp/>to<sp/>2nd,<sp/>1st<sp/>position<sp/>unchanged.\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;FAIL:<sp/>ADDING<sp/>to<sp/>2nd,<sp/>1st<sp/>position<sp/>EXPECTED:<sp/>%d<sp/>%d<sp/>%d<sp/>%d<sp/>%d<sp/>\n.&quot;</highlight><highlight class="normal">,<sp/>dummy1.arrival_floor,<sp/>dummy1.arrival_time,<sp/>dummy1.dest_floor,<sp/>dummy1.id,<sp/>dummy1.in_elevator);</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;FAIL:<sp/>ADDING<sp/>to<sp/>2nd,<sp/>1st<sp/>position<sp/><sp/><sp/><sp/><sp/><sp/>GOT:<sp/>%d<sp/>%d<sp/>%d<sp/>%d<sp/>%d<sp/>\n.&quot;</highlight><highlight class="normal">,<sp/>head-&gt;<ref refid="structpassenger_1a0a31a3de4943a83121587e2d11b3e2c0" kindref="member">arrival_floor</ref>,<sp/>head-&gt;<ref refid="structpassenger_1a8dd292bfb4015a71df26b57eb23c8701" kindref="member">arrival_time</ref>,<sp/>head-&gt;<ref refid="structpassenger_1a1cd2d080a6795d30505e8722d329c7e2" kindref="member">dest_floor</ref>,<sp/>head-&gt;<ref refid="structpassenger_1a25f6b216e5dc0bede72e133edcf4b03f" kindref="member">id</ref>,<sp/>head-&gt;<ref refid="structpassenger_1a8af124b4de91150e204a2374e98ee71f" kindref="member">in_elevator</ref>);</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(f,<sp/></highlight><highlight class="stringliteral">&quot;FAIL:<sp/>ADDING<sp/>to<sp/>2nd,<sp/>1st<sp/>position<sp/>EXPECTED:<sp/>%d<sp/>%d<sp/>%d<sp/>%d<sp/>%d<sp/>\n.&quot;</highlight><highlight class="normal">,<sp/>dummy1.arrival_floor,<sp/>dummy1.arrival_time,<sp/>dummy1.dest_floor,<sp/>dummy1.id,<sp/>dummy1.in_elevator);</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(f,<sp/></highlight><highlight class="stringliteral">&quot;FAIL:<sp/>ADDING<sp/>to<sp/>2nd,<sp/>1st<sp/>position<sp/><sp/><sp/><sp/><sp/><sp/>GOT:<sp/>%d<sp/>%d<sp/>%d<sp/>%d<sp/>%d<sp/>\n.&quot;</highlight><highlight class="normal">,<sp/>head-&gt;<ref refid="structpassenger_1a0a31a3de4943a83121587e2d11b3e2c0" kindref="member">arrival_floor</ref>,<sp/>head-&gt;<ref refid="structpassenger_1a8dd292bfb4015a71df26b57eb23c8701" kindref="member">arrival_time</ref>,<sp/>head-&gt;<ref refid="structpassenger_1a1cd2d080a6795d30505e8722d329c7e2" kindref="member">dest_floor</ref>,<sp/>head-&gt;<ref refid="structpassenger_1a25f6b216e5dc0bede72e133edcf4b03f" kindref="member">id</ref>,<sp/>head-&gt;<ref refid="structpassenger_1a8af124b4de91150e204a2374e98ee71f" kindref="member">in_elevator</ref>);</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/>cur<sp/>=<sp/>cur-&gt;<ref refid="structpassenger_1a74a0c954cb7d0e4590b0a2715a768348" kindref="member">next</ref>;</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(compare(dummy2,<sp/>*cur))</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;PASS:<sp/>ADDING<sp/>to<sp/>2nd,<sp/>2nd<sp/>position<sp/>succesfully<sp/>added.\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(f,<sp/></highlight><highlight class="stringliteral">&quot;PASS:<sp/>ADDING<sp/>to<sp/>2nd,<sp/>2nd<sp/>position<sp/>succesfully<sp/>added.\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;FAIL:<sp/>ADDING<sp/>to<sp/>2nd,<sp/>2nd<sp/>position<sp/>EXPECTED:<sp/>%d<sp/>%d<sp/>%d<sp/>%d<sp/>%d<sp/>\n.&quot;</highlight><highlight class="normal">,<sp/>dummy2.arrival_floor,<sp/>dummy2.arrival_time,<sp/>dummy2.dest_floor,<sp/>dummy2.id,<sp/>dummy2.in_elevator);</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;FAIL:<sp/>ADDING<sp/>to<sp/>2nd,<sp/>2nd<sp/>position<sp/><sp/><sp/><sp/><sp/><sp/>GOT:<sp/>%d<sp/>%d<sp/>%d<sp/>%d<sp/>%d<sp/>\n.&quot;</highlight><highlight class="normal">,<sp/>head-&gt;<ref refid="structpassenger_1a0a31a3de4943a83121587e2d11b3e2c0" kindref="member">arrival_floor</ref>,<sp/>head-&gt;<ref refid="structpassenger_1a8dd292bfb4015a71df26b57eb23c8701" kindref="member">arrival_time</ref>,<sp/>head-&gt;<ref refid="structpassenger_1a1cd2d080a6795d30505e8722d329c7e2" kindref="member">dest_floor</ref>,<sp/>head-&gt;<ref refid="structpassenger_1a25f6b216e5dc0bede72e133edcf4b03f" kindref="member">id</ref>,<sp/>head-&gt;<ref refid="structpassenger_1a8af124b4de91150e204a2374e98ee71f" kindref="member">in_elevator</ref>);</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(f,<sp/></highlight><highlight class="stringliteral">&quot;FAIL:<sp/>ADDING<sp/>to<sp/>2nd,<sp/>2nd<sp/>position<sp/>EXPECTED:<sp/>%d<sp/>%d<sp/>%d<sp/>%d<sp/>%d<sp/>\n.&quot;</highlight><highlight class="normal">,<sp/>dummy2.arrival_floor,<sp/>dummy2.arrival_time,<sp/>dummy2.dest_floor,<sp/>dummy2.id,<sp/>dummy2.in_elevator);</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(f,<sp/></highlight><highlight class="stringliteral">&quot;FAIL:<sp/>ADDING<sp/>to<sp/>2nd,<sp/>2nd<sp/>position<sp/><sp/><sp/><sp/><sp/><sp/>GOT:<sp/>%d<sp/>%d<sp/>%d<sp/>%d<sp/>%d<sp/>\n.&quot;</highlight><highlight class="normal">,<sp/>head-&gt;<ref refid="structpassenger_1a0a31a3de4943a83121587e2d11b3e2c0" kindref="member">arrival_floor</ref>,<sp/>head-&gt;<ref refid="structpassenger_1a8dd292bfb4015a71df26b57eb23c8701" kindref="member">arrival_time</ref>,<sp/>head-&gt;<ref refid="structpassenger_1a1cd2d080a6795d30505e8722d329c7e2" kindref="member">dest_floor</ref>,<sp/>head-&gt;<ref refid="structpassenger_1a25f6b216e5dc0bede72e133edcf4b03f" kindref="member">id</ref>,<sp/>head-&gt;<ref refid="structpassenger_1a8af124b4de91150e204a2374e98ee71f" kindref="member">in_elevator</ref>);</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="96"><highlight class="normal"></highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//add<sp/>to<sp/>third<sp/>position</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/>returned_ptr<sp/>=<sp/><ref refid="add__request__queue_8h_1a1aa0db2f2ecae31eaf0fc492d19414c6" kindref="member">add_request_queue</ref>(head,<sp/>dummy3);</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(returned_ptr<sp/>==<sp/>head)</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;PASS:<sp/>Addind<sp/>to<sp/>3rd,<sp/>returning<sp/>ptr<sp/>is<sp/>==<sp/>to<sp/>old<sp/>head.\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(f,<sp/></highlight><highlight class="stringliteral">&quot;PASS:<sp/>Addind<sp/>to<sp/>3rd,<sp/>returning<sp/>ptr<sp/>is<sp/>==<sp/>to<sp/>old<sp/>head.\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;FAIL:<sp/>Addind<sp/>to<sp/>3rd,<sp/>returning<sp/>ptr<sp/>is<sp/>!=<sp/>to<sp/>head.\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;FAIL:<sp/>Addind<sp/>to<sp/>3rd,<sp/>returning<sp/>ptr<sp/>=<sp/>%p<sp/>head<sp/>=<sp/>%p.\n&quot;</highlight><highlight class="normal">,<sp/>returned_ptr,<sp/>head);</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(f,<sp/></highlight><highlight class="stringliteral">&quot;FAIL:<sp/>Addind<sp/>to<sp/>3rd,<sp/>returning<sp/>ptr<sp/>is<sp/>!=<sp/>to<sp/>head.\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(f,<sp/></highlight><highlight class="stringliteral">&quot;FAIL:<sp/>Addind<sp/>to<sp/>3rd,<sp/>returning<sp/>ptr<sp/>=<sp/>%p<sp/>head<sp/>=<sp/>%p.\n&quot;</highlight><highlight class="normal">,<sp/>returned_ptr,<sp/>head);</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/>head<sp/>=<sp/>returned_ptr;</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/>cur<sp/>=<sp/>head;</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(compare(dummy1,<sp/>*head))</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;PASS:<sp/>ADDING<sp/>to<sp/>3rd,<sp/>1st<sp/>position<sp/>unchanged.\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(f,<sp/></highlight><highlight class="stringliteral">&quot;PASS:<sp/>ADDING<sp/>to<sp/>3rd,<sp/>1st<sp/>position<sp/>unchanged.\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;FAIL:<sp/>ADDING<sp/>to<sp/>3rd,<sp/>1st<sp/>position<sp/><sp/>EXPECTED:<sp/>%d<sp/>%d<sp/>%d<sp/>%d<sp/>%d<sp/>\n.&quot;</highlight><highlight class="normal">,<sp/>dummy1.arrival_floor,<sp/>dummy1.arrival_time,<sp/>dummy1.dest_floor,<sp/>dummy1.id,<sp/>dummy1.in_elevator);</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;FAIL:<sp/>ADDING<sp/>to<sp/>3rd,<sp/>1st<sp/>position<sp/><sp/><sp/><sp/><sp/><sp/><sp/>GOT:<sp/>%d<sp/>%d<sp/>%d<sp/>%d<sp/>%d<sp/>\n.&quot;</highlight><highlight class="normal">,<sp/>head-&gt;<ref refid="structpassenger_1a0a31a3de4943a83121587e2d11b3e2c0" kindref="member">arrival_floor</ref>,<sp/>head-&gt;<ref refid="structpassenger_1a8dd292bfb4015a71df26b57eb23c8701" kindref="member">arrival_time</ref>,<sp/>head-&gt;<ref refid="structpassenger_1a1cd2d080a6795d30505e8722d329c7e2" kindref="member">dest_floor</ref>,<sp/>head-&gt;<ref refid="structpassenger_1a25f6b216e5dc0bede72e133edcf4b03f" kindref="member">id</ref>,<sp/>head-&gt;<ref refid="structpassenger_1a8af124b4de91150e204a2374e98ee71f" kindref="member">in_elevator</ref>);</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(f,<sp/></highlight><highlight class="stringliteral">&quot;FAIL:<sp/>ADDING<sp/>to<sp/>3rd,<sp/>1st<sp/>position<sp/><sp/>EXPECTED:<sp/>%d<sp/>%d<sp/>%d<sp/>%d<sp/>%d<sp/>\n.&quot;</highlight><highlight class="normal">,<sp/>dummy1.arrival_floor,<sp/>dummy1.arrival_time,<sp/>dummy1.dest_floor,<sp/>dummy1.id,<sp/>dummy1.in_elevator);</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(f,<sp/></highlight><highlight class="stringliteral">&quot;FAIL:<sp/>ADDING<sp/>to<sp/>3rd,<sp/>1st<sp/>position<sp/><sp/><sp/><sp/><sp/><sp/><sp/>GOT:<sp/>%d<sp/>%d<sp/>%d<sp/>%d<sp/>%d<sp/>\n.&quot;</highlight><highlight class="normal">,<sp/>head-&gt;<ref refid="structpassenger_1a0a31a3de4943a83121587e2d11b3e2c0" kindref="member">arrival_floor</ref>,<sp/>head-&gt;<ref refid="structpassenger_1a8dd292bfb4015a71df26b57eb23c8701" kindref="member">arrival_time</ref>,<sp/>head-&gt;<ref refid="structpassenger_1a1cd2d080a6795d30505e8722d329c7e2" kindref="member">dest_floor</ref>,<sp/>head-&gt;<ref refid="structpassenger_1a25f6b216e5dc0bede72e133edcf4b03f" kindref="member">id</ref>,<sp/>head-&gt;<ref refid="structpassenger_1a8af124b4de91150e204a2374e98ee71f" kindref="member">in_elevator</ref>);</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/>cur<sp/>=<sp/>cur-&gt;<ref refid="structpassenger_1a74a0c954cb7d0e4590b0a2715a768348" kindref="member">next</ref>;</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(compare(dummy2,<sp/>*cur))</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;PASS:<sp/>ADDING<sp/>to<sp/>3rd,<sp/>2nd<sp/>position<sp/>succesfully<sp/>added.\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(f,<sp/></highlight><highlight class="stringliteral">&quot;PASS:<sp/>ADDING<sp/>to<sp/>3rd,<sp/>2nd<sp/>position<sp/>succesfully<sp/>added.\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;FAIL:<sp/>ADDING<sp/>to<sp/>3rd,<sp/>2nd<sp/>position<sp/>EXPECTED:<sp/>%d<sp/>%d<sp/>%d<sp/>%d<sp/>%d<sp/>\n.&quot;</highlight><highlight class="normal">,<sp/>dummy2.arrival_floor,<sp/>dummy2.arrival_time,<sp/>dummy2.dest_floor,<sp/>dummy2.id,<sp/>dummy2.in_elevator);</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;FAIL:<sp/>ADDING<sp/>to<sp/>3rd,<sp/>2nd<sp/>position<sp/><sp/><sp/><sp/><sp/><sp/>GOT:<sp/>%d<sp/>%d<sp/>%d<sp/>%d<sp/>%d<sp/>\n.&quot;</highlight><highlight class="normal">,<sp/>cur-&gt;<ref refid="structpassenger_1a0a31a3de4943a83121587e2d11b3e2c0" kindref="member">arrival_floor</ref>,<sp/>cur-&gt;<ref refid="structpassenger_1a8dd292bfb4015a71df26b57eb23c8701" kindref="member">arrival_time</ref>,<sp/>cur-&gt;<ref refid="structpassenger_1a1cd2d080a6795d30505e8722d329c7e2" kindref="member">dest_floor</ref>,<sp/>cur-&gt;<ref refid="structpassenger_1a25f6b216e5dc0bede72e133edcf4b03f" kindref="member">id</ref>,<sp/>cur-&gt;<ref refid="structpassenger_1a8af124b4de91150e204a2374e98ee71f" kindref="member">in_elevator</ref>);</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(f,<sp/></highlight><highlight class="stringliteral">&quot;FAIL:<sp/>ADDING<sp/>to<sp/>3rd,<sp/>2nd<sp/>position<sp/>EXPECTED:<sp/>%d<sp/>%d<sp/>%d<sp/>%d<sp/>%d<sp/>\n.&quot;</highlight><highlight class="normal">,<sp/>dummy2.arrival_floor,<sp/>dummy2.arrival_time,<sp/>dummy2.dest_floor,<sp/>dummy2.id,<sp/>dummy2.in_elevator);</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(f,<sp/></highlight><highlight class="stringliteral">&quot;FAIL:<sp/>ADDING<sp/>to<sp/>3rd,<sp/>2nd<sp/>position<sp/><sp/><sp/><sp/><sp/><sp/>GOT:<sp/>%d<sp/>%d<sp/>%d<sp/>%d<sp/>%d<sp/>\n.&quot;</highlight><highlight class="normal">,<sp/>cur-&gt;<ref refid="structpassenger_1a0a31a3de4943a83121587e2d11b3e2c0" kindref="member">arrival_floor</ref>,<sp/>cur-&gt;<ref refid="structpassenger_1a8dd292bfb4015a71df26b57eb23c8701" kindref="member">arrival_time</ref>,<sp/>cur-&gt;<ref refid="structpassenger_1a1cd2d080a6795d30505e8722d329c7e2" kindref="member">dest_floor</ref>,<sp/>cur-&gt;<ref refid="structpassenger_1a25f6b216e5dc0bede72e133edcf4b03f" kindref="member">id</ref>,<sp/>cur-&gt;<ref refid="structpassenger_1a8af124b4de91150e204a2374e98ee71f" kindref="member">in_elevator</ref>);</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/>cur<sp/>=<sp/>cur-&gt;<ref refid="structpassenger_1a74a0c954cb7d0e4590b0a2715a768348" kindref="member">next</ref>;</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(compare(dummy3,<sp/>*cur))</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;PASS:<sp/>ADDING<sp/>to<sp/>3rd,<sp/>3rd<sp/>position<sp/>succesfully<sp/>added.\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(f,<sp/></highlight><highlight class="stringliteral">&quot;PASS:<sp/>ADDING<sp/>to<sp/>3rd,<sp/>3rd<sp/>position<sp/>succesfully<sp/>added.\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;FAIL:<sp/>ADDING<sp/>to<sp/>3rd,<sp/>3rd<sp/>position<sp/>EXPECTED:<sp/>%d<sp/>%d<sp/>%d<sp/>%d<sp/>%d<sp/>\n.&quot;</highlight><highlight class="normal">,<sp/>dummy3.arrival_floor,<sp/>dummy3.arrival_time,<sp/>dummy3.dest_floor,<sp/>dummy3.id,<sp/>dummy3.in_elevator);</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;FAIL:<sp/>ADDING<sp/>to<sp/>3rd,<sp/>3rd<sp/>position<sp/><sp/><sp/><sp/><sp/><sp/>GOT:<sp/>%d<sp/>%d<sp/>%d<sp/>%d<sp/>%d<sp/>\n.&quot;</highlight><highlight class="normal">,<sp/>cur-&gt;<ref refid="structpassenger_1a0a31a3de4943a83121587e2d11b3e2c0" kindref="member">arrival_floor</ref>,<sp/>cur-&gt;<ref refid="structpassenger_1a8dd292bfb4015a71df26b57eb23c8701" kindref="member">arrival_time</ref>,<sp/>cur-&gt;<ref refid="structpassenger_1a1cd2d080a6795d30505e8722d329c7e2" kindref="member">dest_floor</ref>,<sp/>cur-&gt;<ref refid="structpassenger_1a25f6b216e5dc0bede72e133edcf4b03f" kindref="member">id</ref>,<sp/>cur-&gt;<ref refid="structpassenger_1a8af124b4de91150e204a2374e98ee71f" kindref="member">in_elevator</ref>);</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(f,<sp/></highlight><highlight class="stringliteral">&quot;FAIL:<sp/>ADDING<sp/>to<sp/>3rd,<sp/>3rd<sp/>position<sp/>EXPECTED:<sp/>%d<sp/>%d<sp/>%d<sp/>%d<sp/>%d<sp/>\n.&quot;</highlight><highlight class="normal">,<sp/>dummy3.arrival_floor,<sp/>dummy3.arrival_time,<sp/>dummy3.dest_floor,<sp/>dummy3.id,<sp/>dummy3.in_elevator);</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(f,<sp/></highlight><highlight class="stringliteral">&quot;FAIL:<sp/>ADDING<sp/>to<sp/>3rd,<sp/>3rd<sp/>position<sp/><sp/><sp/><sp/><sp/><sp/>GOT:<sp/>%d<sp/>%d<sp/>%d<sp/>%d<sp/>%d<sp/>\n.&quot;</highlight><highlight class="normal">,<sp/>cur-&gt;<ref refid="structpassenger_1a0a31a3de4943a83121587e2d11b3e2c0" kindref="member">arrival_floor</ref>,<sp/>cur-&gt;<ref refid="structpassenger_1a8dd292bfb4015a71df26b57eb23c8701" kindref="member">arrival_time</ref>,<sp/>cur-&gt;<ref refid="structpassenger_1a1cd2d080a6795d30505e8722d329c7e2" kindref="member">dest_floor</ref>,<sp/>cur-&gt;<ref refid="structpassenger_1a25f6b216e5dc0bede72e133edcf4b03f" kindref="member">id</ref>,<sp/>cur-&gt;<ref refid="structpassenger_1a8af124b4de91150e204a2374e98ee71f" kindref="member">in_elevator</ref>);</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/>fflush(f);</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/>fclose(f);</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="154"><highlight class="normal">}</highlight></codeline>
<codeline lineno="155"><highlight class="normal"></highlight></codeline>
<codeline lineno="156"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structpassenger" kindref="compound">passenger</ref><sp/>create_dummy_passenger(int<sp/>val)</highlight></codeline>
<codeline lineno="157"><highlight class="normal">{</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structpassenger" kindref="compound">passenger</ref><sp/>dummy;</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/>dummy.<ref refid="structpassenger_1a0a31a3de4943a83121587e2d11b3e2c0" kindref="member">arrival_floor</ref><sp/>=<sp/>val;</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/>dummy.<ref refid="structpassenger_1a8dd292bfb4015a71df26b57eb23c8701" kindref="member">arrival_time</ref><sp/>=<sp/>val;</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/>dummy.<ref refid="structpassenger_1a1cd2d080a6795d30505e8722d329c7e2" kindref="member">dest_floor</ref><sp/>=<sp/>val;</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/>dummy.<ref refid="structpassenger_1a25f6b216e5dc0bede72e133edcf4b03f" kindref="member">id</ref><sp/>=<sp/>val;</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/>dummy.<ref refid="structpassenger_1a8af124b4de91150e204a2374e98ee71f" kindref="member">in_elevator</ref><sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/>dummy.<ref refid="structpassenger_1a74a0c954cb7d0e4590b0a2715a768348" kindref="member">next</ref><sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>dummy;</highlight></codeline>
<codeline lineno="166"><highlight class="normal">}</highlight></codeline>
<codeline lineno="167"><highlight class="normal"></highlight></codeline>
<codeline lineno="168"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>compare(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structpassenger" kindref="compound">passenger</ref><sp/>a,<sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structpassenger" kindref="compound">passenger</ref><sp/>b)</highlight></codeline>
<codeline lineno="169"><highlight class="normal">{</highlight></codeline>
<codeline lineno="170"><highlight class="normal"></highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>count<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/>count<sp/>+=<sp/>a.<ref refid="structpassenger_1a0a31a3de4943a83121587e2d11b3e2c0" kindref="member">arrival_floor</ref><sp/>==<sp/>b.<ref refid="structpassenger_1a0a31a3de4943a83121587e2d11b3e2c0" kindref="member">arrival_floor</ref>;</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/>count<sp/>+=<sp/>a.<ref refid="structpassenger_1a8dd292bfb4015a71df26b57eb23c8701" kindref="member">arrival_time</ref><sp/>==<sp/>b.<ref refid="structpassenger_1a8dd292bfb4015a71df26b57eb23c8701" kindref="member">arrival_time</ref>;</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/>count<sp/>+=<sp/>a.<ref refid="structpassenger_1a25f6b216e5dc0bede72e133edcf4b03f" kindref="member">id</ref><sp/>==<sp/>b.<ref refid="structpassenger_1a25f6b216e5dc0bede72e133edcf4b03f" kindref="member">id</ref>;</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/>count<sp/>+=<sp/>a.<ref refid="structpassenger_1a1cd2d080a6795d30505e8722d329c7e2" kindref="member">dest_floor</ref><sp/>==<sp/>b.<ref refid="structpassenger_1a1cd2d080a6795d30505e8722d329c7e2" kindref="member">dest_floor</ref>;</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/>count<sp/>+=<sp/>a.<ref refid="structpassenger_1a8af124b4de91150e204a2374e98ee71f" kindref="member">in_elevator</ref><sp/>==<sp/>b.<ref refid="structpassenger_1a8af124b4de91150e204a2374e98ee71f" kindref="member">in_elevator</ref>;</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>count<sp/>==<sp/>5;</highlight></codeline>
<codeline lineno="178"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="C:/Users/Work/git_repo/elevator_simulator/test/test_add_request_queue.c"/>
  </compounddef>
</doxygen>
