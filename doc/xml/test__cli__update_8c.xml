<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.18">
  <compounddef id="test__cli__update_8c" kind="file" language="C++">
    <compoundname>test_cli_update.c</compoundname>
    <includes refid="cli__update_8h" local="yes">cli_update.h</includes>
    <includes refid="structures_8h" local="yes">structures.h</includes>
    <includes refid="globals_8h" local="yes">globals.h</includes>
    <includes local="yes">stdio.h</includes>
    <includes local="yes">stdlib.h</includes>
    <incdepgraph>
      <node id="4">
        <label>stdbool.h</label>
      </node>
      <node id="3">
        <label>structures.h</label>
        <link refid="structures_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="7">
        <label>stdlib.h</label>
      </node>
      <node id="1">
        <label>C:/Users/Work/git_repo/elevator_simulator/test/test_cli_update.c</label>
        <link refid="test__cli__update_8c"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>globals.h</label>
        <link refid="globals_8h"/>
      </node>
      <node id="2">
        <label>cli_update.h</label>
        <link refid="cli__update_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="6">
        <label>stdio.h</label>
      </node>
    </incdepgraph>
      <sectiondef kind="var">
      <memberdef kind="variable" id="test__cli__update_8c_1a6513a0179a5da3e7fbc4cdb9c874ece2" prot="public" static="no" mutable="no">
        <type>struct <ref refid="structelevator" kindref="compound">elevator</ref></type>
        <definition>struct elevator dummy1</definition>
        <argsstring></argsstring>
        <name>dummy1</name>
        <initializer>= {1,0,0,1,0,3,10,30,15,0}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Work/git_repo/elevator_simulator/test/test_cli_update.c" line="21" column="13" bodyfile="C:/Users/Work/git_repo/elevator_simulator/test/test_cli_update.c" bodystart="23" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="test__cli__update_8c_1a0d7c0c926b894801023f5d1ca572e8ba" prot="public" static="no" mutable="no">
        <type>struct <ref refid="structelevator" kindref="compound">elevator</ref></type>
        <definition>struct elevator dummy2</definition>
        <argsstring></argsstring>
        <name>dummy2</name>
        <initializer>= {0,0,0,1,0,6,10,2,3,0}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Work/git_repo/elevator_simulator/test/test_cli_update.c" line="21" column="13" bodyfile="C:/Users/Work/git_repo/elevator_simulator/test/test_cli_update.c" bodystart="24" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="test__cli__update_8c_1a61a11131e97ff5bc0039404838323fb2" prot="public" static="no" mutable="no">
        <type>struct <ref refid="structelevator" kindref="compound">elevator</ref></type>
        <definition>struct elevator dummy3</definition>
        <argsstring></argsstring>
        <name>dummy3</name>
        <initializer>= {1,0,0,0,0,0,10,5,0,0}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Work/git_repo/elevator_simulator/test/test_cli_update.c" line="21" column="13" bodyfile="C:/Users/Work/git_repo/elevator_simulator/test/test_cli_update.c" bodystart="25" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="test__cli__update_8c_1a46582765e9ed219811c2b2c05ce53133" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void case1</definition>
        <argsstring>(void)</argsstring>
        <name>case1</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Simple test to check if it can clear the screen. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Work/git_repo/elevator_simulator/test/test_cli_update.c" line="53" column="6" bodyfile="C:/Users/Work/git_repo/elevator_simulator/test/test_cli_update.c" bodystart="53" bodyend="57" declfile="C:/Users/Work/git_repo/elevator_simulator/test/test_cli_update.c" declline="19" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="test__cli__update_8c_1a124b0b5989271f456b3cbd130b719dc9" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void case2</definition>
        <argsstring>(void)</argsstring>
        <name>case2</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Test to check it can work properly with dynamic array </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Work/git_repo/elevator_simulator/test/test_cli_update.c" line="61" column="6" bodyfile="C:/Users/Work/git_repo/elevator_simulator/test/test_cli_update.c" bodystart="61" bodyend="67" declfile="C:/Users/Work/git_repo/elevator_simulator/test/test_cli_update.c" declline="20" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="test__cli__update_8c_1aa86a7a69e05e4345682717345ffc2e06" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void case3</definition>
        <argsstring>(void)</argsstring>
        <name>case3</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Test to check it can work properly with dynamic array and repeated calls. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Work/git_repo/elevator_simulator/test/test_cli_update.c" line="72" column="6" bodyfile="C:/Users/Work/git_repo/elevator_simulator/test/test_cli_update.c" bodystart="72" bodyend="91" declfile="C:/Users/Work/git_repo/elevator_simulator/test/test_cli_update.c" declline="21" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="test__cli__update_8c_1a38108d7e56fd0e399b32c70e40e4debf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test_cli_update</definition>
        <argsstring>(void)</argsstring>
        <name>test_cli_update</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Work/git_repo/elevator_simulator/test/test_cli_update.c" line="27" column="6" bodyfile="C:/Users/Work/git_repo/elevator_simulator/test/test_cli_update.c" bodystart="27" bodyend="48"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>contains test case for <ref refid="cli__update_8h_1a61dffc3815d70e783c61e48ec93bb2c9" kindref="member">cli_update()</ref> function </para>
    </briefdescription>
    <detaileddescription>
<para>Tests the <ref refid="cli__update_8h_1a61dffc3815d70e783c61e48ec93bb2c9" kindref="member">cli_update()</ref> function for basic screen clear test, display test and repeated function calls test.</para>
<para><simplesect kind="author"><para>Maaz Jamal </para>
</simplesect>
</para>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"></codeline>
<codeline lineno="13"><highlight class="preprocessor">#include<sp/>&quot;<ref refid="cli__update_8h" kindref="compound">cli_update.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="structures_8h" kindref="compound">structures.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="globals_8h" kindref="compound">globals.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;stdio.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;stdlib.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>case1(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>case2(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>case3(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structelevator" kindref="compound">elevator</ref><sp/>dummy1<sp/>=<sp/>{1,0,0,1,0,3,10,30,15,0};</highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structelevator" kindref="compound">elevator</ref><sp/>dummy2<sp/>=<sp/>{0,0,0,1,0,6,10,2,3,0};</highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structelevator" kindref="compound">elevator</ref><sp/>dummy3<sp/>=<sp/>{1,0,0,0,0,0,10,5,0,0};</highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>test_cli_update(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">){</highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>chose;</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><ref refid="globals_8h_1a11ee4b54505479cda7e127a7030a76a7" kindref="member">elevator_count</ref><sp/>=<sp/>3;</highlight></codeline>
<codeline lineno="30"><highlight class="normal">printf(</highlight><highlight class="stringliteral">&quot;Choose<sp/>between<sp/>tests:\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="31"><highlight class="normal">printf(</highlight><highlight class="stringliteral">&quot;1-Screen<sp/>Clear<sp/>Test\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="32"><highlight class="normal">printf(</highlight><highlight class="stringliteral">&quot;2-Display<sp/>Test.\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="33"><highlight class="normal">printf(</highlight><highlight class="stringliteral">&quot;3-Repeated<sp/>Calls<sp/>test\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="34"><highlight class="normal">scanf(</highlight><highlight class="stringliteral">&quot;%d&quot;</highlight><highlight class="normal">,&amp;chose);</highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(chose){</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>1:</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/>case1();</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>2:</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/>case2();</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>3:</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/>case3();</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="47"><highlight class="normal">};</highlight></codeline>
<codeline lineno="48"><highlight class="normal">}</highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>case1(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">){</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;THIS<sp/>LINE<sp/>SHOULD<sp/>NOT<sp/>BE<sp/>VISIBLE<sp/>FAIL.\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structelevator" kindref="compound">elevator</ref><sp/>arr[3]<sp/>=<sp/>{dummy1,dummy2,dummy3};</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="cli__update_8h_1a61dffc3815d70e783c61e48ec93bb2c9" kindref="member">cli_update</ref>(arr,<sp/>0);</highlight></codeline>
<codeline lineno="57"><highlight class="normal">}</highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>case2(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">){</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structelevator" kindref="compound">elevator</ref>*<sp/>arr<sp/>=<sp/>malloc(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structelevator" kindref="compound">elevator</ref>)*3);</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/>arr[0]=<sp/>dummy1;</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/>arr[1]=<sp/>dummy2;</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/>arr[2]=<sp/>dummy3;</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="cli__update_8h_1a61dffc3815d70e783c61e48ec93bb2c9" kindref="member">cli_update</ref>(arr,<sp/>0);</highlight></codeline>
<codeline lineno="67"><highlight class="normal">}</highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>case3(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">){</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structelevator" kindref="compound">elevator</ref>*<sp/>arr<sp/>=<sp/>malloc(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structelevator" kindref="compound">elevator</ref>)*3);</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/>arr[0]=<sp/>dummy1;</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/>arr[1]=<sp/>dummy2;</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/>arr[2]=<sp/>dummy3;</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=0;i&lt;100;i++){</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;THIS<sp/>LINE<sp/>SHOULD<sp/>NOT<sp/>BE<sp/>VISIBLE<sp/>AT<sp/>END.Running<sp/>100<sp/>Calls.\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="cli__update_8h_1a61dffc3815d70e783c61e48ec93bb2c9" kindref="member">cli_update</ref>(arr,(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)i);</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>arr[0].<ref refid="structelevator_1a2c87ee6189da284a149438ce8b0acc8d" kindref="member">cur_floor</ref><sp/>=<sp/>i%50;</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>arr[0].<ref refid="structelevator_1a6272f86a10a9c4bf565e184a4537373d" kindref="member">timer</ref><sp/>=<sp/>10<sp/>-<sp/>i%10;</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>arr[0].<ref refid="structelevator_1a35976c62fece1a1887b39d2761e409e3" kindref="member">passenger_count</ref><sp/>=<sp/>10-i%6;</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>arr[1].<ref refid="structelevator_1aa773f94528363621939e5fcc99dcc6ad" kindref="member">direction_down</ref><sp/>=<sp/>i%2;</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>arr[1].<ref refid="structelevator_1a186590570ed9fee16200f9fffd3a0873" kindref="member">moving</ref><sp/>=<sp/>i%2;</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>arr[1].<ref refid="structelevator_1a6272f86a10a9c4bf565e184a4537373d" kindref="member">timer</ref><sp/>=<sp/>10<sp/>-i%10;</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>arr[2].<ref refid="structelevator_1a186590570ed9fee16200f9fffd3a0873" kindref="member">moving</ref><sp/>=<sp/>i%2;</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>arr[2].<ref refid="structelevator_1a2c87ee6189da284a149438ce8b0acc8d" kindref="member">cur_floor</ref>=<sp/>i%10;</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>arr[2].<ref refid="structelevator_1a6272f86a10a9c4bf565e184a4537373d" kindref="member">timer</ref><sp/>=<sp/>10<sp/>-i%10;</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;This<sp/>is<sp/>iteration<sp/>count:<sp/>%d\ns&quot;</highlight><highlight class="normal">,i);</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="91"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="C:/Users/Work/git_repo/elevator_simulator/test/test_cli_update.c"/>
  </compounddef>
</doxygen>
